{"version":3,"sources":["src/components/LoadingScreen.tsx","src/layout/Intro.tsx","src/components/Title.tsx","src/components/Check.tsx","src/lib/state.ts","src/layout/ControlsSidebar.tsx","src/components/Highlight.tsx","src/layout/Paper.tsx","src/components/SidebarButton.tsx","src/components/Tool.tsx","src/components/Toolbox.tsx","src/layout/ToolsSidebar.tsx","src/layout/Main.tsx","App.tsx"],"names":["LoadingScreen","View","style","styles","body","ActivityIndicator","size","StatusBar","StyleSheet","create","display","height","flexDirection","alignItems","justifyContent","backgroundColor","paddingHorizontal","Intro","introduced","container","box","Text","selectable","text","Pressable","onPress","position","left","bottom","right","fontWeight","padding","fontSize","width","top","border","borderRadius","marginVertical","Title","title","name","marginTop","color","textAlignc","fontStyle","Check","results","sphere","result","marginBottom","marginRight","textAlign","transform","translateX","selectedState","atom","key","default","resultsState","pairingState","ControlsSidebar","useRecoilState","marginHorizontal","Highlight","id","count","device","paraghraph","useState","isHovered","setIsHovered","selected","setSelected","substring","range","newSelected","Array","fill","onHoverIn","onHoverOut","deviceSelected","deviceHovered","length","alignSelf","Paper","devices","ScrollView","nestedScrollEnabled","paper","split","map","index","flag","elem","fontFamily","paddingVertical","SidebarButton","Tool","description","modalVisible","setModalVisible","pairing","setPairing","selectedText","selectedTextId","indexOf","tool","includes","idx","findIndex","pair","textId","newPairing","structuredClone","deviceId","buttonSelect","FontAwesome","Modal","animationType","transparent","visible","onRequestClose","centeredView","modalView","buttonClose","textStyle","MaterialCommunityIcons","flex","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","modalText","Toolbox","tools","paddingBottom","ToolsSidebar","info","textSetter","setResults","i","Math","trunc","flexWrap","Main","data","textState","setText","useEffect","undefined","texts","from","_","author","guides","App","wasIntroduced","setIntro","isLoading","setLoading","setData","fetch","then","response","json","sort","random","catch","error","console","finally"],"mappings":"8MAGe,SAASA,IACtB,OACE,eAACC,EAAA,QAAI,CAACC,MAAOC,EAAOC,KAAK,UACvB,cAACC,EAAA,QAAiB,CAACC,KAAK,UACxB,cAACC,EAAA,UAAS,CAACL,MAAM,YAKvB,IAAMC,EAASK,UAAWC,OAAO,CAC/BL,KAAM,CACJM,QAAS,OACTC,OAAQ,OACRC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,gBAAiB,UACjBC,kBAAmB,M,yBCjBVC,EAAQ,SAAH,GAAuF,IAAjFC,EAAU,EAAVA,WACpB,OACI,cAAC,UAAQ,CAAChB,MAAOC,EAAOgB,UAAU,SAC9B,eAAClB,EAAA,QAAI,CAACC,MAAOC,EAAOiB,IAAI,UACpB,cAACC,EAAA,QAAI,CAACC,YAAY,EAAOpB,MAAOC,EAAOoB,KAAK,qCAC5C,cAACF,EAAA,QAAI,CAACC,YAAY,EAAOpB,MAAOC,EAAOoB,KAAK,qCAC5C,cAACC,EAAA,QAAS,CAACC,QAAS,WAAQP,GAAW,IAAQ,SAC3C,cAACG,EAAA,QAAI,8BAOnBlB,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPO,SAAU,WACVC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPlB,OAAQ,QAEZY,KAAM,CACFO,WAAY,OACZC,QAAS,GACTC,SAAU,IAEdZ,IAAK,CACDa,MAAO,MACPP,SAAW,WACXC,KAAM,OACNO,IAAK,OACLxB,QAAS,OACTK,gBAAiB,OACjBoB,OAAQ,iBACRC,aAAc,GACdvB,WAAY,SACZC,eAAgB,aAChBuB,eAAgB,MCvCXC,EAAQ,SAAH,GAA0D,IAApDC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAC3B,OACI,eAACvC,EAAA,QAAI,CAACC,MAAOC,EAAOiB,IAAI,UACpB,cAACC,EAAA,QAAI,CAACnB,MAAOC,EAAOoC,MAAM,SAAEA,IAC5B,eAAClB,EAAA,QAAI,CAACnB,MAAOC,EAAOqC,KAAK,gBAAKA,SAKpCrC,EAASK,UAAWC,OAAO,CAC7B8B,MAAO,CACHE,UAAW,GACXT,SAAU,GACVF,WAAY,OACZY,MAAO,QACPC,WAAY,UAEhBvB,IAAK,CACDa,MAAO,OACPvB,QAAS,OACTE,cAAe,SACfC,WAAY,SACZC,eAAgB,UAEpB0B,KAAM,CACFR,SAAU,GACVY,UAAW,SACXF,MAAO,U,kBC3BFG,EAAQ,SAAH,GAAyC,IAAnCC,EAAO,EAAPA,QACpB,OACI,eAAC7C,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,UAC1B,cAACE,EAAA,QAAI,CAACnB,MAAOC,EAAOoB,KAAK,0CACzB,cAACtB,EAAA,QAAI,CAACC,MAAOC,EAAO4C,OAAO,SACvB,eAAC1B,EAAA,QAAI,CAACnB,MAAOC,EAAO6C,OAAO,UAAEF,EAAO,aAM9C3C,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPc,MAAO,IACPtB,OAAQ,GACRD,QAAS,OACTK,gBAAiB,UACjBqB,aAAc,GACdvB,WAAY,SACZC,eAAgB,SAChBmC,aAAc,IAElB1B,KAAM,CACFO,WAAY,OACZC,QAAS,GACTC,SAAU,GACVkB,YAAa,GACbC,UAAW,UAEfJ,OAAQ,CACJrB,SAAU,WACVhB,QAAS,OACTG,WAAY,SACZC,eAAgB,SAChB4B,MAAO,UACPT,MAAO,IACPtB,OAAQ,IACRyB,aAAc,IACdrB,gBAAiB,UACjBqC,UAAW,CAAC,CAACC,WAAY,OAE7BL,OAAQ,CACJhB,SAAU,GACVF,WAAY,UC3CPwB,EAAgBC,eAAK,CAC9BC,IAAK,WACLC,QAAS,KAGAC,EAAeH,eAAK,CAC7BC,IAAK,UACLC,SAAU,IAGDE,EAAeJ,eAAK,CAC7BC,IAAK,UACLC,QAAS,KCTAG,EAAkB,SAAH,GAAiB,OACzC,MAA8BC,yBAAeH,GAAa,WAAnDZ,EAAO,KAAY,KAC1B,OACI,cAAC7C,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,UACZ,IAAb2B,EAAiB,cAAC,EAAK,CAACA,QAASA,IAAa,gCAKrD3C,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPc,MAAO,MACPvB,QAAS,OACTK,gBAAiB,OACjBF,WAAY,SACZC,eAAgB,aAChBgD,iBAAkB,M,QChBbC,EAAY,SAAH,GAA8J,IAAxJC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAU,EAAVA,WAAY7D,EAAI,EAAJA,KACvD,EAAkC8D,oBAAS,GAAM,WAA1CC,EAAS,KAAEC,EAAY,KAC9B,EAAgCT,yBAAeP,GAAc,WAAtDiB,EAAQ,KAAEC,EAAW,KAE5B,OACI,eAACnD,EAAA,QAAI,WAAE8C,EAAWM,UAAU,EAAGP,EAAOQ,MAAM,GAAGT,GAAO,cAACzC,EAAA,QAAS,CAACC,QAAS,WACtE,IAAIkD,EAAcC,MAAMtE,GAAMuE,MAAK,EAAO,EAAGvE,GAC7CqE,EAAYX,IAAOO,EAASP,GAC5BQ,EAAYG,IACbG,UAAW,kBAAIR,GAAa,IAAOS,WAAY,kBAAIT,GAAa,IAAO,SACtE,cAACjD,EAAA,QAAI,CAACnB,MAAOqE,EAASP,GAAM7D,EAAO6E,eAAkBX,EAAYlE,EAAO8E,cAAgB9E,EAAO+D,OAAQ,SAAEC,EAAWM,UAAUP,EAAOQ,MAAM,GAAGT,EAAOC,EAAOQ,MAAM,GAAGT,OAC5JE,EAAWM,UAAUP,EAAOQ,MAAM,GAAGT,EAAOA,EAAME,EAAWe,YAI5E/E,EAASK,UAAWC,OAAO,CAC7ByD,OAAQ,CACJxB,MAAO,WAEXuC,cAAe,CACXvC,MAAO,UACP3B,gBAAiB,YACjBoE,UAAW,cAEfH,eAAgB,CACZtC,MAAO,UACP3B,gBAAiB,YACjBoE,UAAW,gBC7BNC,EAAQ,SAAH,GAAkE,IAA7D7D,EAAI,EAAJA,KAAM8D,EAAO,EAAPA,QACvBpB,EAAQ,EACZ,OACE,cAAChE,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,SAC5B,cAACmE,EAAA,QAAU,CAACC,qBAAmB,WAC7B,cAACtF,EAAA,QAAI,CAACC,MAAOC,EAAOqF,MAAM,SACzBjE,EAAKkE,MAAM,MAAMC,KAAI,SAACvB,EAAYwB,GACjC,IAAMrF,EAAO6D,EAAWe,OACpBU,GAAO,EACLC,EACJ,eAACxE,EAAA,QAAI,CAACnB,MAAOC,EAAOoB,KAAK,UACtB8D,EAAQK,KAAI,SAACxB,EAAQyB,GACpB,GAAIrF,EAAK2D,EAAQC,EAAOQ,MAAM,IAAMT,GAASC,EAAOQ,MAAM,IAAMpE,EAAK2D,GAASC,EAAOQ,MAAM,IAAMT,EAAQC,EAAOQ,MAAM,GAEpH,OADAkB,GAAO,EACA,cAAC,EAAS,CAAa5B,GAAI2B,EAAO1B,MAAOA,EAAOC,OAAQA,EAAQC,WAAYA,EAAY7D,KAAM+E,EAAQH,QAAtFS,MAG1BC,EAAO,GAAKzB,IAPgBwB,GAWjC,OADA1B,GAAS3D,EACFuF,YAQX1F,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPc,MAAO,MACPlB,gBAAiB,OACjBF,WAAY,SACZC,eAAgB,SAChBqB,OAAQ,mBAEZqD,MAAO,CACHnD,eAAgB,GAChByB,iBAAkB,IAEtBvC,KAAM,CACF4B,UAAW,UACXnB,SAAU,GACV8D,WAAY,kBACZC,gBAAiB,MC9CZC,EAAgB,SAAH,GAAqH,IAA/GzE,EAAI,EAAJA,KAAME,EAAO,EAAPA,QAClC,OACI,cAACD,EAAA,QAAS,CAACC,QAASA,EAAQ,SACxB,cAACxB,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,SAC1B,cAACE,EAAA,QAAI,CAACC,YAAY,EAAOpB,MAAOC,EAAOoB,KAAK,SAAEA,SAMxDpB,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPc,MAAO,IACPvB,QAAS,OACTK,gBAAiB,UACjBqB,aAAc,GACdvB,WAAY,SACZC,eAAgB,aAChBuB,eAAgB,IAEpBd,KAAM,CACFO,WAAY,OACZC,QAAS,GACTC,SAAU,M,mCCjBLiE,EAAO,SAAH,GAA0G,IAApGjC,EAAE,EAAFA,GAAIxB,EAAI,EAAJA,KAAM0D,EAAW,EAAXA,YAC7B,GAD8C,EAAJ5F,KACF8D,oBAAS,IAAM,WAAhD+B,EAAY,KAAEC,EAAe,KACpC,EAA8BvC,yBAAeF,GAAa,WAAnD0C,EAAO,KAAEC,EAAU,KACpBC,EAAe1C,yBAAeP,GAC9BkD,EAAiBD,EAAa,GAAGE,SAAQ,GAE/C,OACI,eAACxG,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,UAC1B,eAAClB,EAAA,QAAI,CAACC,MAAOC,EAAOuG,KAAK,UACrB,cAAClF,EAAA,QAAS,CAACC,QAAS,WAChB,GAAI8E,EAAa,GAAGI,UAAS,GAAO,CAChC,IAAMC,EAAMP,EAAQQ,WAAU,SAACC,GAAI,OAAKA,EAAKC,SAAWP,KAChDQ,EAAaC,gBAAgBZ,GACjCW,EAAWJ,GAAKM,SAAWb,EAAQO,GAAKM,WAAalD,GAAM,EAAIA,EAC/DsC,EAAWU,KAErB,SACE,cAAC/G,EAAA,QAAI,CAACC,MAAOC,EAAOgH,aAAa,SAAEZ,EAAa,GAAGI,UAAS,IAASN,EAAQA,EAAQQ,WAAU,SAACC,GAAI,OAAKA,EAAKC,SAAWP,MAAiBU,WAAalD,EAAK,cAACoD,EAAA,QAAW,CAAC5E,KAAK,SAASlC,KAAM,GAAIoC,MAAM,UAAa,iCAExN,cAACrB,EAAA,QAAI,CAACC,YAAY,EAAOpB,MAAOC,EAAO+D,OAAO,SAAE1B,OAEpD,eAACvC,EAAA,QAAI,WACD,cAACoH,EAAA,QAAK,CACFC,cAAc,QACdC,aAAa,EACbC,QAASrB,EACTsB,eAAgB,WACZrB,GAAiBD,IACnB,SAEF,cAAClG,EAAA,QAAI,CAACC,MAAOC,EAAOuH,aAAa,SAC7B,eAACzH,EAAA,QAAI,CAACC,MAAOC,EAAOwH,UAAU,UAC1B,cAAC,UAAQ,UAAEzB,IACX,cAAC1E,EAAA,QAAS,CACNtB,MAAOC,EAAOyH,YACdnG,QAAS,kBAAM2E,GAAiBD,IAAc,SAE9C,cAAC9E,EAAA,QAAI,CAACnB,MAAOC,EAAO0H,UAAU,4BAK9C,cAACrG,EAAA,QAAS,CAACC,QAAS,kBAAM2E,GAAgB,IAAM,SAC5C,cAAC0B,EAAA,QAAsB,CAACtF,KAAK,wBAAwBlC,KAAM,GAAIoC,MAAM,mBAQnFvC,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPT,QAAS,OACTE,cAAe,MACfE,eAAgB,gBAChBD,WAAY,SACZiD,iBAAkB,GAClBnD,OAAQ,GACRsB,MAAO,KAEXiC,OAAQ,GAGRwC,KAAM,CACFhG,QAAS,OACTE,cAAe,MACfC,WAAY,UAEhBsG,aAAc,CACVlF,MAAO,GACPtB,OAAQ,GACRyB,aAAc,EACdrB,gBAAiB,UACjBmC,YAAa,GACbxC,QAAS,OACTG,WAAY,SACZC,eAAgB,UAEpB4G,aAAc,CACVK,KAAM,EACNjH,eAAgB,SAChBD,WAAY,SACZ4B,UAAW,IAEfkF,UAAW,CACPK,OAAQ,GACRjH,gBAAiB,QACjBqB,aAAc,GACdL,QAAS,GACTlB,WAAY,SACZoH,YAAa,OACbC,aAAc,CACVjG,MAAO,EACPtB,OAAQ,GAEZwH,cAAe,IACfC,aAAc,EACdC,UAAW,GAEfT,YAAa,CACT7G,gBAAiB,UACjBgB,QAAS,GACTK,aAAc,IAElByF,UAAW,CACPnF,MAAO,QACPZ,WAAY,OACZqB,UAAW,UAEfmF,UAAW,CACPrF,aAAc,GACdE,UAAW,aCrHNoF,EAAU,SAAH,GAGT,IAHeC,EAAK,EAALA,MAKtB,OACI,eAACvI,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,UAC1B,cAACE,EAAA,QAAI,CAACnB,MAAOC,EAAOoB,KAAK,8BACxBiH,EAAM9C,KAAI,SAACgB,EAAMf,GAAK,OACnB,cAAC,EAAI,CAAa3B,GAAI2B,EAAOnD,KAAMkE,EAAKlE,KAAM0D,YAAaQ,EAAKR,YAAa5F,KAAMkI,EAAMtD,QAA9ES,UAMrBxF,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPc,MAAO,IACPvB,QAAS,OACTK,gBAAiB,UACjBqB,aAAc,GACdvB,WAAY,SACZC,eAAgB,aAChB2H,cAAe,IAEnBlH,KAAM,CACFO,WAAY,OACZC,QAAS,GACTC,SAAU,MCzBL0G,EAAe,SAAH,GAAgL,IAA1KF,EAAK,EAALA,MAAOlI,EAAI,EAAJA,KAAM0D,EAAE,EAAFA,GAAI2E,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WAClD,EAA8B/E,yBAAeH,GAAa,WAA1CmF,GAAF,KAAY,MAC1B,EAA8BhF,yBAAeF,GAAa,WAAnD0C,EAAO,KAAY,KAE1B,OACI,eAACpG,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,UAC1B,cAAC,EAAO,CAACqH,MAAOA,IAChB,cAAC,EAAa,CAACjH,KAAK,qBAAqBE,QAAS,WAE9C,IADA,IAAIqB,EAAU,EACLgG,EAAI,EAAGA,EAAIzC,EAAQnB,OAAQ4D,IAC5BzC,EAAQyC,GAAG5B,WAAayB,EAAKtD,QAAQyD,GAAGtG,MAAMM,IAEtD+F,EAAWE,KAAKC,MAAOlG,EAAUuD,EAAQnB,OAAU,SAEvD,cAAC,EAAa,CAAC3D,KAAK,OAAOE,QAAS,WAAQmH,GAAY5E,EAAG,GAAK1D,UAKtEH,EAASK,UAAWC,OAAO,CAC7BU,UAAW,CACPc,MAAO,MACPgH,SAAU,OACVvI,QAAS,OACTK,gBAAiB,OACjBF,WAAY,SACZC,eAAgB,aAChBgD,iBAAkB,MCvBboF,EAAO,SAAH,GAA2H,IAArHC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAC3B,EAAgCvF,yBAAeP,GAAc,WAA5CkB,GAAF,KAAa,MAC5B,EAA8BX,yBAAeF,GAAa,WAA1C2C,GAAF,KAAY,MAC1B,EAA8BzC,yBAAeH,GAAa,WAA1CmF,GAAF,KAAY,MAC1B,MAAwBO,EAAS,GAA1B7H,EAAI,KAAE8H,EAAO,KAUpB,OARAC,qBAAU,gBACKC,IAATJ,IACAN,GAAY,GACZrE,EAAYI,MAAU,MAAJuE,OAAI,EAAJA,EAAMK,MAAMjI,GAAM8D,QAAQH,QAAQL,MAAK,EAAO,EAAO,MAAJsE,OAAI,EAAJA,EAAMK,MAAMjI,GAAM8D,QAAQH,SAC7FoB,EAAW1B,MAAM6E,KAAK7E,MAAU,MAAJuE,OAAI,EAAJA,EAAMK,MAAMjI,GAAM8D,QAAQH,SAAS,SAACwE,EAAG/D,GAAY,MAAO,CAAEoB,OAAQpB,EAAOuB,UAAW,UAErH,CAAC3F,IAGF,qCACI,cAAC,EAAK,CAACgB,MAAW,MAAJ4G,OAAI,EAAJA,EAAMK,MAAMjI,GAAMiB,KAAOA,KAAU,MAAJ2G,OAAI,EAAJA,EAAMK,MAAMjI,GAAMoI,SAC/D,eAAC1J,EAAA,QAAI,CAACC,MAAOC,EAAOgB,UAAU,UAC9B,cAAC,EAAe,IAChB,cAAC,EAAK,CAACI,KAAU,MAAJ4H,OAAI,EAAJA,EAAMK,MAAMjI,GAAMA,KAAO8D,QAAa,MAAJ8D,OAAI,EAAJA,EAAMK,MAAMjI,GAAM8D,UACjE,cAAC,EAAY,CAACmD,MAAW,MAAJW,OAAI,EAAJA,EAAMS,OAAS5F,GAAIzC,EAAMjB,KAAU,MAAJ6I,OAAI,EAAJA,EAAMK,MAAMtE,OAASyD,KAAU,MAAJQ,OAAI,EAAJA,EAAMK,MAAMjI,GAAQqH,WAAYS,OAE/G,cAAC9I,EAAA,UAAS,CAACL,MAAM,aAKnBC,EAASK,UAAWC,OAAO,CAC/BU,UAAW,CACT4G,KAAM,EACN9F,MAAO,OACPvB,QAAS,OACTE,cAAe,MACfG,gBAAiB,OACjBF,WAAY,aACZC,eAAgB,eAChBuB,eAAgB,GAChBI,UAAW,MCvCA,SAASoH,IACtB,IAAMT,EAAYhF,mBAAS,GAC3B,EAAkCA,oBAAS,GAAM,WAA1C0F,EAAa,KAAEC,EAAQ,KAC9B,EAAgC3F,oBAAS,GAAK,WAAvC4F,EAAS,KAAEC,EAAU,KAC5B,EAAwB7F,wBAA2BmF,GAAU,WAAtDJ,EAAI,KAAEe,EAAO,KAapB,OAXAZ,qBAAU,WACRa,MAAM,sEACHC,MAAK,SAACC,GAAQ,OAAKA,EAASC,UAC5BF,MAAK,SAACE,GACJA,EAAcd,MAASc,EAAcd,MAAMe,MAAK,kBAAMxB,KAAKyB,SAAW,MACvEN,EAAQI,MAETG,OAAM,SAACC,GAAK,OAAKC,QAAQD,MAAMA,MAC/BE,SAAQ,kBAAMX,GAAW,QAC3B,IAGD,cAAC,aAAU,UACRD,EAAY,cAAChK,EAAa,IACzB,qCACE,cAAC,EAAI,CAACmJ,KAAMA,EAAMC,UAAWA,IAC5BU,EAAgB,6BAAQ,cAAC,EAAK,CAAC5I,WAAY6I,W","file":"static/js/app.ee321509.chunk.js","sourcesContent":["import { StyleSheet, View, ActivityIndicator } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\n\nexport default function LoadingScreen() {\n  return (\n    <View style={styles.body}>\n      <ActivityIndicator size='large' />\n      <StatusBar style='auto' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  body: {\n    display: \"flex\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#f2f2f6\",\n    paddingHorizontal: 15,\n  },\n});\n","import { BlurView } from 'expo-blur';\nimport { StyleSheet, View, Text, Pressable } from 'react-native';\n\nexport const Intro = ({ introduced }: { introduced: React.Dispatch<React.SetStateAction<boolean>> }) => {\n    return (\n        <BlurView style={styles.container}>\n            <View style={styles.box}>\n                <Text selectable={false} style={styles.text}>Welcome dear LA student</Text>\n                <Text selectable={false} style={styles.text}>Welcome dear LA student</Text>\n                <Pressable onPress={() => { introduced(true) }}>\n                    <Text>PROCEED</Text>\n                </Pressable>\n            </View>\n        </BlurView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'absolute',\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: '100%',\n    }, \n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    },\n    box: {\n        width: '50%',\n        position : 'absolute',\n        left: '25vw',\n        top: '50vh',\n        display: 'flex',\n        backgroundColor: '#fff',\n        border: '1px solid #000',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginVertical: 10,\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\n\nexport const Title = ({ title, name }: { title: string, name: string }) => {\n    return (\n        <View style={styles.box} >\n            <Text style={styles.title}>{title}</Text>\n            <Text style={styles.name}>by {name}</Text>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({ \n    title: {\n        marginTop: 75,\n        fontSize: 34,\n        fontWeight: 'bold',\n        color: 'black',\n        textAlignc: 'center',\n    },\n    box: {\n        width: '50hw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    name: {\n        fontSize: 20,\n        fontStyle: 'italic',\n        color: 'gray',\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\n\nexport const Check = ({ results }: { results: number}) => {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>Something something heheheha</Text>\n            <View style={styles.sphere}>\n                <Text style={styles.result}>{results}%</Text>\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        height: 75,\n        display: 'flex',\n        backgroundColor: '#5bc8af',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: 30\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 14,\n        marginRight: 90,\n        textAlign: 'center',\n    },\n    sphere: {\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: '#00a368', \n        width: 105,\n        height: 105,\n        borderRadius: 105,\n        backgroundColor: '#00a368',\n        transform: [{translateX: 100}],\n    },\n    result: {\n        fontSize: 40,\n        fontWeight: 'bold',\n    }\n});","import { atom } from \"recoil\";\n\nexport const selectedState = atom({\n    key: \"selected\",\n    default: [] as boolean[],\n});\n\nexport const resultsState = atom({\n    key: \"results\",\n    default: -1 as number,\n});\n\nexport const pairingState = atom({\n    key: \"pairing\",\n    default: [] as Array<{\n        textId: number;\n        deviceId: number;\n    }>,\n});\n","import { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { Check } from '../components/Check';\nimport { resultsState } from '../lib/state';\n\nexport const ControlsSidebar = ({ }: {}) => {\n    const [results, setResults] = useRecoilState(resultsState);\n    return (\n        <View style={styles.container}>\n            {results !== -1 ? <Check results={results}/> : <></>}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"20%\",\n        display: 'flex',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginHorizontal: 20,\n    },\n});","import { useState } from 'react';\nimport { Pressable, StyleSheet, Text, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { selectedState } from '../lib/state';\n\nexport const Highlight = ({ id, count, device, paraghraph, size }: { id: number, count: number, device: {name: number;range: Array<number>}, paraghraph: string, size: number}) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [selected, setSelected] = useRecoilState(selectedState);\n    \n    return (\n        <Text>{paraghraph.substring(0, device.range[0]-count)}<Pressable onPress={()=>{\n            let newSelected = Array(size).fill(false, 0, size);\n            newSelected[id] = !selected[id];\n            setSelected(newSelected);\n        }} onHoverIn={()=>setIsHovered(true)} onHoverOut={()=>setIsHovered(false)}>\n            <Text style={selected[id] ? styles.deviceSelected : (isHovered ? styles.deviceHovered : styles.device)}>{paraghraph.substring(device.range[0]-count, device.range[1]-count)}</Text>\n        </Pressable>{paraghraph.substring(device.range[1]-count, count+paraghraph.length)}</Text>\n    );\n};\n\nconst styles = StyleSheet.create({\n    device: {\n        color: '#5bc8af',\n    },\n    deviceHovered: {\n        color: '#5bc8af',\n        backgroundColor: '#d9d9d9aa',\n        alignSelf: 'flex-start',\n    },\n    deviceSelected: {\n        color: '#5bc8af',\n        backgroundColor: '#d9d9d9dd',\n        alignSelf: 'flex-start',\n    }\n});","import { ScrollView, StyleSheet, Text, View } from 'react-native';\nimport { Highlight } from '../components/Highlight';\n\nexport const Paper = ({text, devices} : {text: string, devices: Array<Device>}) => {\n  var count = 0;\n  return (\n    <View style={styles.container}>\n      <ScrollView nestedScrollEnabled>\n        <View style={styles.paper}>\n        {text.split('\\n').map((paraghraph, index) => {\n          const size = paraghraph.length;\n          let flag = false;\n          const elem = (\n            <Text style={styles.text} key={index}>\n              {devices.map((device, index) => {\n                if (size+count > device.range[0] && count <= device.range[0] && size+count >= device.range[1] && count < device.range[1]) {\n                  flag = true;\n                  return <Highlight key={index} id={index} count={count} device={device} paraghraph={paraghraph} size={devices.length} />;\n                }\n              })}\n              {flag ? '' : paraghraph}\n            </Text>\n          )\n          count += size;\n          return elem;\n        })}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: '50%',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px solid black',\n    },\n    paper: {\n        marginVertical: 45,\n        marginHorizontal: 75\n    },\n    text: {\n        textAlign: 'justify',\n        fontSize: 22,\n        fontFamily: \"Times New Roman\",\n        paddingVertical: 10,\n    },\n});","import { GestureResponderEvent, Pressable, StyleSheet, Text, View } from 'react-native';\n\nexport const SidebarButton = ({ text, onPress }: { text: string, onPress?: ((event: GestureResponderEvent) => void) | null | undefined } ) => {\n    return (\n        <Pressable onPress={onPress}>\n            <View style={styles.container}>\n                <Text selectable={false} style={styles.text}>{text}</Text>\n            </View>\n        </Pressable>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        display: 'flex',\n        backgroundColor: '#d9d9d9',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginVertical: 10,\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    }\n});","import React, { useState } from \"react\";\nimport { Pressable, StyleSheet, Text, View, Modal } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons'; \nimport Markdown from 'react-native-markdown-display';\nimport { useRecoilState } from \"recoil\";\nimport { pairingState, selectedState } from \"../lib/state\";\nimport { FontAwesome } from '@expo/vector-icons';\n\nexport const Tool = ({ id, name, description, size }: { id: number, name: string, description: string, size: number }) => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const [pairing, setPairing] = useRecoilState(pairingState);\n    const selectedText = useRecoilState(selectedState);\n    const selectedTextId = selectedText[0].indexOf(true);\n    \n    return (\n        <View style={styles.container} >\n            <View style={styles.tool}>\n                <Pressable onPress={() => {\n                    if (selectedText[0].includes(true)) {\n                        const idx = pairing.findIndex((pair) => pair.textId === selectedTextId);        \n                            let newPairing = structuredClone(pairing);\n                            newPairing[idx].deviceId = pairing[idx].deviceId === id ? -1 : id;\n                            setPairing(newPairing);\n                    }\n                }}>\n                    <View style={styles.buttonSelect}>{selectedText[0].includes(true) && pairing[pairing.findIndex((pair) => pair.textId === selectedTextId)].deviceId === id ? <FontAwesome name=\"square\" size={13} color=\"black\" /> : <></>}</View>\n                </Pressable>\n                <Text selectable={false} style={styles.device}>{name}</Text>\n            </View>\n            <View>\n                <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                    onRequestClose={() => {\n                        setModalVisible(!modalVisible);\n                    }}\n                >\n                    <View style={styles.centeredView}>\n                        <View style={styles.modalView}>\n                            <Markdown>{description}</Markdown>\n                            <Pressable\n                                style={styles.buttonClose}\n                                onPress={() => setModalVisible(!modalVisible)}\n                            >\n                                <Text style={styles.textStyle}>Close</Text>\n                            </Pressable>\n                        </View>\n                    </View>\n                </Modal>\n                <Pressable onPress={() => setModalVisible(true)}>\n                    <MaterialCommunityIcons name=\"chat-question-outline\" size={24} color=\"black\" />\n                </Pressable>\n            </View>\n            \n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({ \n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginHorizontal: 20,\n        height: 30,\n        width: 200,\n    },\n    device: {\n        \n    },\n    tool: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    buttonSelect: {\n        width: 15,\n        height: 15,\n        borderRadius: 2,\n        backgroundColor: '#d9d9d9',\n        marginRight: 10,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    centeredView: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 22\n      },\n    modalView: {\n        margin: 20,\n        backgroundColor: \"white\",\n        borderRadius: 20,\n        padding: 35,\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5\n    },\n    buttonClose: {\n        backgroundColor: \"#2196F3\",\n        padding: 10,\n        borderRadius: 20,\n    },\n    textStyle: {\n        color: \"white\",\n        fontWeight: \"bold\",\n        textAlign: \"center\"\n    },\n    modalText: {\n        marginBottom: 15,\n        textAlign: \"justify\"\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\nimport { Tool } from './Tool';\n\nexport const Toolbox = ({ tools }: { tools: Array<{\n    name: string;\n    description: string;\n  }>}) => {\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>Rethorical tools</Text>\n            {tools.map((tool, index) => (\n                <Tool key={index} id={index} name={tool.name} description={tool.description} size={tools.length} />\n            ))}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        display: 'flex',\n        backgroundColor: '#5bc8af',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        paddingBottom: 20,\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    }\n});","import { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { SidebarButton } from '../components/SidebarButton';\nimport { Toolbox } from '../components/Toolbox';\nimport { pairingState, resultsState } from '../lib/state';\n\nexport const ToolsSidebar = ({ tools, size, id, info, textSetter }: { tools: Array<Guide>, size: number, id: number, info: ChallengeText, textSetter: React.Dispatch<React.SetStateAction<number>>}) => {\n    const [results, setResults] = useRecoilState(resultsState);\n    const [pairing, setPairing] = useRecoilState(pairingState);\n    \n    return (\n        <View style={styles.container}>\n            <Toolbox tools={tools} />\n            <SidebarButton text=\"CHECK YOUR ANSWERS\" onPress={() => {\n                let results = 0;\n                for (let i = 0; i < pairing.length; i++) {\n                    if (pairing[i].deviceId === info.devices[i].name) results++;\n                }\n                setResults(Math.trunc((results / pairing.length) * 100));\n            }} />\n            <SidebarButton text=\"Next\" onPress={() => { textSetter((id+1) % size) }} />\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"20%\",\n        flexWrap: 'wrap',\n        display: 'flex',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginHorizontal: 20,\n    }\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { useEffect } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { Title } from '../components/Title';\nimport { ControlsSidebar } from '../layout/ControlsSidebar';\nimport { Paper } from '../layout/Paper';\nimport { ToolsSidebar } from '../layout/ToolsSidebar';\nimport { pairingState, resultsState, selectedState } from '../lib/state';\n\nexport const Main = ({ data, textState }: { data: Data | undefined, textState: [number, React.Dispatch<React.SetStateAction<number>>]}) => {\n  const [selected, setSelected] = useRecoilState(selectedState);\n  const [pairing, setPairing] = useRecoilState(pairingState);\n  const [results, setResults] = useRecoilState(resultsState);\n  const [text, setText] = textState;\n\n  useEffect(() => {\n    if (data !== undefined) {\n        setResults(-1);\n        setSelected(Array(data?.texts[text].devices.length).fill(false, 0, data?.texts[text].devices.length));\n        setPairing(Array.from(Array(data?.texts[text].devices.length), (_, index) => { return { textId: index, deviceId: -1 }}));\n    }\n  }, [text]);\n  \n  return (\n    <> \n        <Title title={data?.texts[text].name!} name={data?.texts[text].author!} />\n        <View style={styles.container}>\n        <ControlsSidebar />\n        <Paper text={data?.texts[text].text!} devices={data?.texts[text].devices!}/>\n        <ToolsSidebar tools={data?.guides!} id={text} size={data?.texts.length!} info={data?.texts[text]!} textSetter={setText}/>\n        </View>\n        <StatusBar style=\"auto\" />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    justifyContent: 'space-around',\n    marginVertical: 50,\n    marginTop: 45\n  },\n});\n","import { StyleSheet } from 'react-native';\nimport { BlurView } from 'expo-blur';\nimport { useEffect, useState } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport LoadingScreen from './src/components/LoadingScreen';\nimport { Intro } from './src/layout/Intro';\nimport { Main } from './src/layout/Main';\n\nexport default function App() {\n  const textState = useState(0);\n  const [wasIntroduced, setIntro] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState<Data | undefined>(undefined);\n\n  useEffect(() => {\n    fetch('https://raw.githubusercontent.com/lampask/grasp-eng/dev/texts.json')\n      .then((response) => response.json())\n      .then((json) => {\n        (json as Data).texts = (json as Data).texts.sort(() => Math.random() - 0.5);\n        setData(json)\n      })\n      .catch((error) => console.error(error))\n      .finally(() => setLoading(false));\n  }, []);\n  \n  return (\n    <RecoilRoot>\n      {isLoading ? <LoadingScreen /> : (\n        <>\n          <Main data={data} textState={textState} />\n          {wasIntroduced ? <></> : <Intro introduced={setIntro} />}\n        </>\n      )}\n    </RecoilRoot>\n  );\n}"],"sourceRoot":""}