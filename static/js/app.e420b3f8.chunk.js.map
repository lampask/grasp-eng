{"version":3,"sources":["src/components/LoadingScreen.tsx","src/layout/Intro.tsx","src/components/Title.tsx","src/components/Check.tsx","src/lib/state.ts","src/layout/ControlsSidebar.tsx","src/components/Highlight.tsx","src/layout/Paper.tsx","src/components/SidebarButton.tsx","src/components/Tool.tsx","src/components/Toolbox.tsx","src/layout/ToolsSidebar.tsx","src/layout/Main.tsx","App.tsx"],"names":["LoadingScreen","View","style","styles","body","ActivityIndicator","size","StatusBar","StyleSheet","create","display","height","flexDirection","alignItems","justifyContent","backgroundColor","paddingHorizontal","Intro","data","introduced","container","box","Text","selectable","text","title","undefined","content","Pressable","onPress","buttonText","position","left","bottom","right","fontWeight","padding","fontSize","width","top","border","borderRadius","marginVertical","Title","name","marginTop","color","textAlignc","fontStyle","Check","results","res","resText","forEach","result","breakpoint","message","sphere","marginBottom","marginRight","textAlign","transform","translateX","selectedState","atom","key","default","resultsState","pairingState","ControlsSidebar","useRecoilState","marginHorizontal","Highlight","id","count","device","paraghraph","useState","isHovered","setIsHovered","selected","setSelected","substring","range","newSelected","Array","fill","onHoverIn","onHoverOut","deviceSelected","deviceHovered","length","alignSelf","Paper","devices","ScrollView","nestedScrollEnabled","paper","split","map","index","flag","elem","fontFamily","paddingVertical","SidebarButton","Tool","description","modalVisible","setModalVisible","pairing","setPairing","selectedText","selectedTextId","indexOf","tool","includes","idx","findIndex","pair","textId","newPairing","structuredClone","deviceId","buttonSelect","FontAwesome","Modal","animationType","transparent","visible","onRequestClose","centeredView","modalView","buttonClose","textStyle","MaterialCommunityIcons","flex","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","modalText","Toolbox","tools","paddingBottom","ToolsSidebar","info","textSetter","setResults","i","Math","trunc","flexWrap","Main","textState","setText","useEffect","texts","from","_","author","guides","App","wasIntroduced","setIntro","isLoading","setLoading","setData","fetch","then","response","json","sort","random","catch","error","console","finally","intro"],"mappings":"8MAGe,SAASA,IACtB,OACE,eAACC,EAAA,QAAI,CAACC,MAAOC,EAAOC,KAAK,UACvB,cAACC,EAAA,QAAiB,CAACC,KAAK,UACxB,cAACC,EAAA,UAAS,CAACL,MAAM,YAKvB,IAAMC,EAASK,UAAWC,OAAO,CAC/BL,KAAM,CACJM,QAAS,OACTC,OAAQ,OACRC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,gBAAiB,UACjBC,kBAAmB,M,iCChBVC,EAAQ,SAAH,GAA0G,IAApGC,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WAC1B,OACI,cAAC,UAAQ,CAACjB,MAAOC,EAAOiB,UAAU,SAC9B,eAACnB,EAAA,QAAI,CAACC,MAAOC,EAAOkB,IAAI,UACpB,cAACC,EAAA,QAAI,CAACC,YAAY,EAAOrB,MAAOC,EAAOqB,KAAK,SAAEN,EAAKO,QACnD,cAAC,UAAgB,eACHC,IAATR,EAAqBA,EAAKS,QAAU,KAEzC,cAACC,EAAA,QAAS,CAACC,QAAS,WAAQV,GAAW,IAAQ,SAC3C,cAACG,EAAA,QAAI,UAAEJ,EAAKY,qBAO1B3B,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPW,SAAU,WACVC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPvB,OAAQ,QAEZa,KAAM,CACFW,WAAY,OACZC,QAAS,GACTC,SAAU,IAEdhB,IAAK,CACDiB,MAAO,MACPP,SAAW,WACXC,KAAM,OACNO,IAAK,OACL7B,QAAS,OACTK,gBAAiB,OACjByB,OAAQ,iBACRC,aAAc,GACd5B,WAAY,SACZC,eAAgB,aAChB4B,eAAgB,MC1CXC,EAAQ,SAAH,GAA0D,IAApDlB,EAAK,EAALA,MAAOmB,EAAI,EAAJA,KAC3B,OACI,eAAC3C,EAAA,QAAI,CAACC,MAAOC,EAAOkB,IAAI,UACpB,cAACC,EAAA,QAAI,CAACpB,MAAOC,EAAOsB,MAAM,SAAEA,IAC5B,eAACH,EAAA,QAAI,CAACpB,MAAOC,EAAOyC,KAAK,gBAAKA,SAKpCzC,EAASK,UAAWC,OAAO,CAC7BgB,MAAO,CACHoB,UAAW,GACXR,SAAU,GACVF,WAAY,OACZW,MAAO,QACPC,WAAY,UAEhB1B,IAAK,CACDiB,MAAO,OACP5B,QAAS,OACTE,cAAe,SACfC,WAAY,SACZC,eAAgB,UAEpB8B,KAAM,CACFP,SAAU,GACVW,UAAW,SACXF,MAAO,UC3BFG,EAAQ,SAAH,GAA8D,IAAxDC,EAAO,EAAPA,QAASC,EAAG,EAAHA,IAEzBC,EAAU,GAOd,OANAD,EAAIE,SAAQ,SAACC,GACLA,EAAOC,YAAcL,IACrBE,EAAUE,EAAOE,YAKrB,eAACvD,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,UAC1B,cAACE,EAAA,QAAI,CAACpB,MAAOC,EAAOqB,KAAK,SAAE4B,IAC3B,cAACnD,EAAA,QAAI,CAACC,MAAOC,EAAOsD,OAAO,SACvB,eAACnC,EAAA,QAAI,CAACpB,MAAOC,EAAOmD,OAAO,UAAEJ,EAAO,aAM9C/C,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPkB,MAAO,IACP3B,OAAQ,GACRD,QAAS,OACTK,gBAAiB,UACjB0B,aAAc,GACd5B,WAAY,SACZC,eAAgB,SAChB4C,aAAc,IAElBlC,KAAM,CACFW,WAAY,OACZC,QAAS,GACTC,SAAU,GACVsB,YAAa,GACbC,UAAW,UAEfH,OAAQ,CACJ1B,SAAU,WACVrB,QAAS,OACTG,WAAY,SACZC,eAAgB,SAChBgC,MAAO,UACPR,MAAO,IACP3B,OAAQ,IACR8B,aAAc,IACd1B,gBAAiB,UACjB8C,UAAW,CAAC,CAACC,WAAY,OAE7BR,OAAQ,CACJjB,SAAU,GACVF,WAAY,UCnDP4B,EAAgBC,eAAK,CAC9BC,IAAK,WACLC,QAAS,KAGAC,EAAeH,eAAK,CAC7BC,IAAK,UACLC,SAAU,IAGDE,EAAeJ,eAAK,CAC7BC,IAAK,UACLC,QAAS,KCTAG,EAAkB,SAAH,GAAkC,IAA7BlB,EAAG,EAAHA,IAC7B,EAA8BmB,yBAAeH,GAAa,WAAnDjB,EAAO,KAAY,KAC1B,OACI,cAACjD,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,UACZ,IAAb8B,EAAiB,cAAC,EAAK,CAACA,QAASA,EAASC,IAAKA,IAAU,gCAKhEhD,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPkB,MAAO,MACP5B,QAAS,OACTK,gBAAiB,OACjBF,WAAY,SACZC,eAAgB,aAChByD,iBAAkB,M,QChBbC,EAAY,SAAH,GAA8J,IAAxJC,EAAE,EAAFA,GAAIC,EAAK,EAALA,MAAOC,EAAM,EAANA,OAAQC,EAAU,EAAVA,WAAYtE,EAAI,EAAJA,KACvD,EAAkCuE,oBAAS,GAAM,WAA1CC,EAAS,KAAEC,EAAY,KAC9B,EAAgCT,yBAAeP,GAAc,WAAtDiB,EAAQ,KAAEC,EAAW,KAE5B,OACI,eAAC3D,EAAA,QAAI,WAAEsD,EAAWM,UAAU,EAAGP,EAAOQ,MAAM,GAAGT,GAAO,cAAC9C,EAAA,QAAS,CAACC,QAAS,WACtE,IAAIuD,EAAcC,MAAM/E,GAAMgF,MAAK,EAAO,EAAGhF,GAC7C8E,EAAYX,IAAOO,EAASP,GAC5BQ,EAAYG,IACbG,UAAW,kBAAIR,GAAa,IAAOS,WAAY,kBAAIT,GAAa,IAAO,SACtE,cAACzD,EAAA,QAAI,CAACpB,MAAO8E,EAASP,GAAMtE,EAAOsF,eAAkBX,EAAY3E,EAAOuF,cAAgBvF,EAAOwE,OAAQ,SAAEC,EAAWM,UAAUP,EAAOQ,MAAM,GAAGT,EAAOC,EAAOQ,MAAM,GAAGT,OAC5JE,EAAWM,UAAUP,EAAOQ,MAAM,GAAGT,EAAOA,EAAME,EAAWe,YAI5ExF,EAASK,UAAWC,OAAO,CAC7BkE,OAAQ,CACJ7B,MAAO,WAEX4C,cAAe,CACX5C,MAAO,UACP/B,gBAAiB,YACjB6E,UAAW,cAEfH,eAAgB,CACZ3C,MAAO,UACP/B,gBAAiB,YACjB6E,UAAW,gBC7BNC,EAAQ,SAAH,GAAkE,IAA7DrE,EAAI,EAAJA,KAAMsE,EAAO,EAAPA,QACvBpB,EAAQ,EACZ,OACE,cAACzE,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,SAC5B,cAAC2E,EAAA,QAAU,CAACC,qBAAmB,WAC7B,cAAC/F,EAAA,QAAI,CAACC,MAAOC,EAAO8F,MAAM,SACzBzE,EAAK0E,MAAM,MAAMC,KAAI,SAACvB,EAAYwB,GACjC,IAAM9F,EAAOsE,EAAWe,OACpBU,GAAO,EACLC,EACJ,eAAChF,EAAA,QAAI,CAACpB,MAAOC,EAAOqB,KAAK,UACtBsE,EAAQK,KAAI,SAACxB,EAAQyB,GACpB,GAAI9F,EAAKoE,EAAQC,EAAOQ,MAAM,IAAMT,GAASC,EAAOQ,MAAM,IAAM7E,EAAKoE,GAASC,EAAOQ,MAAM,IAAMT,EAAQC,EAAOQ,MAAM,GAEpH,OADAkB,GAAO,EACA,cAAC,EAAS,CAAa5B,GAAI2B,EAAO1B,MAAOA,EAAOC,OAAQA,EAAQC,WAAYA,EAAYtE,KAAMwF,EAAQH,QAAtFS,MAG1BC,EAAO,GAAKzB,IAPgBwB,GAWjC,OADA1B,GAASpE,EACFgG,YAQXnG,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPkB,MAAO,MACPvB,gBAAiB,OACjBF,WAAY,SACZC,eAAgB,SAChB0B,OAAQ,mBAEZyD,MAAO,CACHvD,eAAgB,GAChB6B,iBAAkB,IAEtB/C,KAAM,CACFoC,UAAW,UACXvB,SAAU,GACVkE,WAAY,kBACZC,gBAAiB,MC9CZC,EAAgB,SAAH,GAAqH,IAA/GjF,EAAI,EAAJA,KAAMK,EAAO,EAAPA,QAClC,OACI,cAACD,EAAA,QAAS,CAACC,QAASA,EAAQ,SACxB,cAAC5B,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,SAC1B,cAACE,EAAA,QAAI,CAACC,YAAY,EAAOrB,MAAOC,EAAOqB,KAAK,SAAEA,SAMxDrB,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPkB,MAAO,IACP5B,QAAS,OACTK,gBAAiB,UACjB0B,aAAc,GACd5B,WAAY,SACZC,eAAgB,aAChB4B,eAAgB,IAEpBlB,KAAM,CACFW,WAAY,OACZC,QAAS,GACTC,SAAU,M,0BCjBLqE,EAAO,SAAH,GAA0G,IAApGjC,EAAE,EAAFA,GAAI7B,EAAI,EAAJA,KAAM+D,EAAW,EAAXA,YAC7B,GAD8C,EAAJrG,KACFuE,oBAAS,IAAM,WAAhD+B,EAAY,KAAEC,EAAe,KACpC,EAA8BvC,yBAAeF,GAAa,WAAnD0C,EAAO,KAAEC,EAAU,KACpBC,EAAe1C,yBAAeP,GAC9BkD,EAAiBD,EAAa,GAAGE,SAAQ,GAE/C,OACI,eAACjH,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,UAC1B,eAACnB,EAAA,QAAI,CAACC,MAAOC,EAAOgH,KAAK,UACrB,cAACvF,EAAA,QAAS,CAACC,QAAS,WAChB,GAAImF,EAAa,GAAGI,UAAS,GAAO,CAChC,IAAMC,EAAMP,EAAQQ,WAAU,SAACC,GAAI,OAAKA,EAAKC,SAAWP,KAChDQ,EAAaC,gBAAgBZ,GACjCW,EAAWJ,GAAKM,SAAWb,EAAQO,GAAKM,WAAalD,GAAM,EAAIA,EAC/DsC,EAAWU,KAErB,SACE,cAACxH,EAAA,QAAI,CAACC,MAAOC,EAAOyH,aAAa,SAAEZ,EAAa,GAAGI,UAAS,IAASN,EAAQA,EAAQQ,WAAU,SAACC,GAAI,OAAKA,EAAKC,SAAWP,MAAiBU,WAAalD,EAAK,cAACoD,EAAA,QAAW,CAACjF,KAAK,SAAStC,KAAM,GAAIwC,MAAM,UAAa,iCAExN,cAACxB,EAAA,QAAI,CAACC,YAAY,EAAOrB,MAAOC,EAAOwE,OAAO,SAAE/B,OAEpD,eAAC3C,EAAA,QAAI,WACD,cAAC6H,EAAA,QAAK,CACFC,cAAc,QACdC,aAAa,EACbC,QAASrB,EACTsB,eAAgB,WACZrB,GAAiBD,IACnB,SAEF,cAAC3G,EAAA,QAAI,CAACC,MAAOC,EAAOgI,aAAa,SAC7B,eAAClI,EAAA,QAAI,CAACC,MAAOC,EAAOiI,UAAU,UAC1B,cAAC,UAAQ,UAAEzB,IACX,cAAC/E,EAAA,QAAS,CACN1B,MAAOC,EAAOkI,YACdxG,QAAS,kBAAMgF,GAAiBD,IAAc,SAE9C,cAACtF,EAAA,QAAI,CAACpB,MAAOC,EAAOmI,UAAU,4BAK9C,cAAC1G,EAAA,QAAS,CAACC,QAAS,kBAAMgF,GAAgB,IAAM,SAC5C,cAAC0B,EAAA,QAAsB,CAAC3F,KAAK,wBAAwBtC,KAAM,GAAIwC,MAAM,mBAQnF3C,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPV,QAAS,OACTE,cAAe,MACfE,eAAgB,gBAChBD,WAAY,SACZ0D,iBAAkB,GAClB5D,OAAQ,GACR2B,MAAO,KAEXqC,OAAQ,GAGRwC,KAAM,CACFzG,QAAS,OACTE,cAAe,MACfC,WAAY,UAEhB+G,aAAc,CACVtF,MAAO,GACP3B,OAAQ,GACR8B,aAAc,EACd1B,gBAAiB,UACjB4C,YAAa,GACbjD,QAAS,OACTG,WAAY,SACZC,eAAgB,UAEpBqH,aAAc,CACVK,KAAM,EACN1H,eAAgB,SAChBD,WAAY,SACZgC,UAAW,IAEfuF,UAAW,CACPK,OAAQ,GACR1H,gBAAiB,QACjB0B,aAAc,GACdL,QAAS,GACTvB,WAAY,SACZ6H,YAAa,OACbC,aAAc,CACVrG,MAAO,EACP3B,OAAQ,GAEZiI,cAAe,IACfC,aAAc,EACdC,UAAW,GAEfT,YAAa,CACTtH,gBAAiB,UACjBqB,QAAS,GACTK,aAAc,IAElB6F,UAAW,CACPxF,MAAO,QACPX,WAAY,OACZyB,UAAW,UAEfmF,UAAW,CACPrF,aAAc,GACdE,UAAW,aCrHNoF,EAAU,SAAH,GAGT,IAHeC,EAAK,EAALA,MAKtB,OACI,eAAChJ,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,UAC1B,cAACE,EAAA,QAAI,CAACpB,MAAOC,EAAOqB,KAAK,8BACxByH,EAAM9C,KAAI,SAACgB,EAAMf,GAAK,OACnB,cAAC,EAAI,CAAa3B,GAAI2B,EAAOxD,KAAMuE,EAAKvE,KAAM+D,YAAaQ,EAAKR,YAAarG,KAAM2I,EAAMtD,QAA9ES,UAMrBjG,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPkB,MAAO,IACP5B,QAAS,OACTK,gBAAiB,UACjB0B,aAAc,GACd5B,WAAY,SACZC,eAAgB,aAChBoI,cAAe,IAEnB1H,KAAM,CACFW,WAAY,OACZC,QAAS,GACTC,SAAU,MCzBL8G,EAAe,SAAH,GAAgL,IAA1KF,EAAK,EAALA,MAAO3I,EAAI,EAAJA,KAAMmE,EAAE,EAAFA,GAAI2E,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WAClD,EAA8B/E,yBAAeH,GAAa,WAA1CmF,GAAF,KAAY,MAC1B,EAA8BhF,yBAAeF,GAAa,WAAnD0C,EAAO,KAAY,KAE1B,OACI,eAAC7G,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,UAC1B,cAAC,EAAO,CAAC6H,MAAOA,IAChB,cAAC,EAAa,CAACzH,KAAK,qBAAqBK,QAAS,WAE9C,IADA,IAAIqB,EAAU,EACLqG,EAAI,EAAGA,EAAIzC,EAAQnB,OAAQ4D,IAC5BzC,EAAQyC,GAAG5B,WAAayB,EAAKtD,QAAQyD,GAAG3G,MAAMM,IAEtDoG,EAAWE,KAAKC,MAAOvG,EAAU4D,EAAQnB,OAAU,SAEvD,cAAC,EAAa,CAACnE,KAAK,OAAOK,QAAS,WAAQwH,GAAY5E,EAAG,GAAKnE,UAKtEH,EAASK,UAAWC,OAAO,CAC7BW,UAAW,CACPkB,MAAO,MACPoH,SAAU,OACVhJ,QAAS,OACTK,gBAAiB,OACjBF,WAAY,SACZC,eAAgB,aAChByD,iBAAkB,MCvBboF,EAAO,SAAH,GAA2H,IAArHzI,EAAI,EAAJA,KAAM0I,EAAS,EAATA,UAC3B,EAAgCtF,yBAAeP,GAAc,WAA5CkB,GAAF,KAAa,MAC5B,EAA8BX,yBAAeF,GAAa,WAA1C2C,GAAF,KAAY,MAC1B,EAA8BzC,yBAAeH,GAAa,WAA1CmF,GAAF,KAAY,MAC1B,MAAwBM,EAAS,GAA1BpI,EAAI,KAAEqI,EAAO,KAUpB,OARAC,qBAAU,gBACKpI,IAATR,IACAoI,GAAY,GACZrE,EAAYI,MAAU,MAAJnE,OAAI,EAAJA,EAAM6I,MAAMvI,GAAMsE,QAAQH,QAAQL,MAAK,EAAO,EAAO,MAAJpE,OAAI,EAAJA,EAAM6I,MAAMvI,GAAMsE,QAAQH,SAC7FoB,EAAW1B,MAAM2E,KAAK3E,MAAU,MAAJnE,OAAI,EAAJA,EAAM6I,MAAMvI,GAAMsE,QAAQH,SAAS,SAACsE,EAAG7D,GAAY,MAAO,CAAEoB,OAAQpB,EAAOuB,UAAW,UAErH,CAACnG,IAGF,qCACI,cAAC,EAAK,CAACC,MAAW,MAAJP,OAAI,EAAJA,EAAM6I,MAAMvI,GAAMoB,KAAOA,KAAU,MAAJ1B,OAAI,EAAJA,EAAM6I,MAAMvI,GAAM0I,SAC/D,eAACjK,EAAA,QAAI,CAACC,MAAOC,EAAOiB,UAAU,UAC9B,cAAC,EAAe,CAAC+B,IAAS,MAAJjC,OAAI,EAAJA,EAAMgC,UAC5B,cAAC,EAAK,CAAC1B,KAAU,MAAJN,OAAI,EAAJA,EAAM6I,MAAMvI,GAAMA,KAAOsE,QAAa,MAAJ5E,OAAI,EAAJA,EAAM6I,MAAMvI,GAAMsE,UACjE,cAAC,EAAY,CAACmD,MAAW,MAAJ/H,OAAI,EAAJA,EAAMiJ,OAAS1F,GAAIjD,EAAMlB,KAAU,MAAJY,OAAI,EAAJA,EAAM6I,MAAMpE,OAASyD,KAAU,MAAJlI,OAAI,EAAJA,EAAM6I,MAAMvI,GAAQ6H,WAAYQ,OAE/G,cAACtJ,EAAA,UAAS,CAACL,MAAM,aAKnBC,EAASK,UAAWC,OAAO,CAC/BW,UAAW,CACToH,KAAM,EACNlG,MAAO,OACP5B,QAAS,OACTE,cAAe,MACfG,gBAAiB,OACjBF,WAAY,aACZC,eAAgB,eAChB4B,eAAgB,GAChBG,UAAW,MCvCA,SAASuH,IACtB,IAAMR,EAAY/E,mBAAS,GAC3B,EAAkCA,oBAAS,GAAM,WAA1CwF,EAAa,KAAEC,EAAQ,KAC9B,EAAgCzF,oBAAS,GAAK,WAAvC0F,EAAS,KAAEC,EAAU,KAC5B,EAAwB3F,wBAA2BnD,GAAU,WAAtDR,EAAI,KAAEuJ,EAAO,KAapB,OAXAX,qBAAU,WACRY,MAAM,sEACHC,MAAK,SAACC,GAAQ,OAAKA,EAASC,UAC5BF,MAAK,SAACE,GACJA,EAAcd,MAASc,EAAcd,MAAMe,MAAK,kBAAMtB,KAAKuB,SAAW,MACvEN,EAAQI,MAETG,OAAM,SAACC,GAAK,OAAKC,QAAQD,MAAMA,MAC/BE,SAAQ,kBAAMX,GAAW,QAC3B,IAGD,cAAC,aAAU,UACRD,EAAY,cAACvK,EAAa,IACzB,qCACE,cAAC,EAAI,CAACkB,KAAMA,EAAM0I,UAAWA,IAC5BS,EAAgB,6BAAQ,cAAC,EAAK,CAACnJ,KAAU,MAAJA,OAAI,EAAJA,EAAMkK,MAAQjK,WAAYmJ,W","file":"static/js/app.e420b3f8.chunk.js","sourcesContent":["import { StyleSheet, View, ActivityIndicator } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\n\nexport default function LoadingScreen() {\n  return (\n    <View style={styles.body}>\n      <ActivityIndicator size='large' />\n      <StatusBar style='auto' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  body: {\n    display: \"flex\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#f2f2f6\",\n    paddingHorizontal: 15,\n  },\n});\n","import { BlurView } from 'expo-blur';\nimport { StyleSheet, View, Text, Pressable } from 'react-native';\nimport ExtendedMarkdown, { Markdown } from 'react-native-markdown-display';\n\nexport const Intro = ({ data, introduced }: { data: Intro, introduced: React.Dispatch<React.SetStateAction<boolean>> }) => {\n    return (\n        <BlurView style={styles.container}>\n            <View style={styles.box}>\n                <Text selectable={false} style={styles.text}>{data.title}</Text>\n                <ExtendedMarkdown>\n                    {data !== undefined ? data.content : \"\"}\n                </ExtendedMarkdown>\n                <Pressable onPress={() => { introduced(true) }}>\n                    <Text>{data.buttonText}</Text>\n                </Pressable>\n            </View>\n        </BlurView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'absolute',\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: '100%',\n    }, \n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    },\n    box: {\n        width: '50%',\n        position : 'absolute',\n        left: '25vw',\n        top: '50vh',\n        display: 'flex',\n        backgroundColor: '#fff',\n        border: '1px solid #000',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginVertical: 10,\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\n\nexport const Title = ({ title, name }: { title: string, name: string }) => {\n    return (\n        <View style={styles.box} >\n            <Text style={styles.title}>{title}</Text>\n            <Text style={styles.name}>by {name}</Text>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({ \n    title: {\n        marginTop: 75,\n        fontSize: 34,\n        fontWeight: 'bold',\n        color: 'black',\n        textAlignc: 'center',\n    },\n    box: {\n        width: '50hw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    name: {\n        fontSize: 20,\n        fontStyle: 'italic',\n        color: 'gray',\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\n\nexport const Check = ({ results, res }: { results: number, res: Result[] }) => {\n    \n    let resText = \"\";\n    res.forEach((result) => {\n        if (result.breakpoint <= results ) {\n            resText = result.message;\n        }\n    })\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>{resText}</Text>\n            <View style={styles.sphere}>\n                <Text style={styles.result}>{results}%</Text>\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        height: 75,\n        display: 'flex',\n        backgroundColor: '#5bc8af',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: 30\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 14,\n        marginRight: 90,\n        textAlign: 'center',\n    },\n    sphere: {\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: '#00a368', \n        width: 105,\n        height: 105,\n        borderRadius: 105,\n        backgroundColor: '#00a368',\n        transform: [{translateX: 100}],\n    },\n    result: {\n        fontSize: 40,\n        fontWeight: 'bold',\n    }\n});","import { atom } from \"recoil\";\n\nexport const selectedState = atom({\n    key: \"selected\",\n    default: [] as boolean[],\n});\n\nexport const resultsState = atom({\n    key: \"results\",\n    default: -1 as number,\n});\n\nexport const pairingState = atom({\n    key: \"pairing\",\n    default: [] as Array<{\n        textId: number;\n        deviceId: number;\n    }>,\n});\n","import { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { Check } from '../components/Check';\nimport { resultsState } from '../lib/state';\n\nexport const ControlsSidebar = ({res}: { res: Result[] }) => {\n    const [results, setResults] = useRecoilState(resultsState);\n    return (\n        <View style={styles.container}>\n            {results !== -1 ? <Check results={results} res={res} /> : <></>}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"20%\",\n        display: 'flex',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginHorizontal: 20,\n    },\n});","import { useState } from 'react';\nimport { Pressable, StyleSheet, Text, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { selectedState } from '../lib/state';\n\nexport const Highlight = ({ id, count, device, paraghraph, size }: { id: number, count: number, device: {name: number;range: Array<number>}, paraghraph: string, size: number}) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [selected, setSelected] = useRecoilState(selectedState);\n    \n    return (\n        <Text>{paraghraph.substring(0, device.range[0]-count)}<Pressable onPress={()=>{\n            let newSelected = Array(size).fill(false, 0, size);\n            newSelected[id] = !selected[id];\n            setSelected(newSelected);\n        }} onHoverIn={()=>setIsHovered(true)} onHoverOut={()=>setIsHovered(false)}>\n            <Text style={selected[id] ? styles.deviceSelected : (isHovered ? styles.deviceHovered : styles.device)}>{paraghraph.substring(device.range[0]-count, device.range[1]-count)}</Text>\n        </Pressable>{paraghraph.substring(device.range[1]-count, count+paraghraph.length)}</Text>\n    );\n};\n\nconst styles = StyleSheet.create({\n    device: {\n        color: '#5bc8af',\n    },\n    deviceHovered: {\n        color: '#5bc8af',\n        backgroundColor: '#d9d9d9aa',\n        alignSelf: 'flex-start',\n    },\n    deviceSelected: {\n        color: '#5bc8af',\n        backgroundColor: '#d9d9d9dd',\n        alignSelf: 'flex-start',\n    }\n});","import { ScrollView, StyleSheet, Text, View } from 'react-native';\nimport { Highlight } from '../components/Highlight';\n\nexport const Paper = ({text, devices} : {text: string, devices: Array<Device>}) => {\n  var count = 0;\n  return (\n    <View style={styles.container}>\n      <ScrollView nestedScrollEnabled>\n        <View style={styles.paper}>\n        {text.split('\\n').map((paraghraph, index) => {\n          const size = paraghraph.length;\n          let flag = false;\n          const elem = (\n            <Text style={styles.text} key={index}>\n              {devices.map((device, index) => {\n                if (size+count > device.range[0] && count <= device.range[0] && size+count >= device.range[1] && count < device.range[1]) {\n                  flag = true;\n                  return <Highlight key={index} id={index} count={count} device={device} paraghraph={paraghraph} size={devices.length} />;\n                }\n              })}\n              {flag ? '' : paraghraph}\n            </Text>\n          )\n          count += size;\n          return elem;\n        })}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: '50%',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n        border: '1px solid black',\n    },\n    paper: {\n        marginVertical: 45,\n        marginHorizontal: 75\n    },\n    text: {\n        textAlign: 'justify',\n        fontSize: 22,\n        fontFamily: \"Times New Roman\",\n        paddingVertical: 10,\n    },\n});","import { GestureResponderEvent, Pressable, StyleSheet, Text, View } from 'react-native';\n\nexport const SidebarButton = ({ text, onPress }: { text: string, onPress?: ((event: GestureResponderEvent) => void) | null | undefined } ) => {\n    return (\n        <Pressable onPress={onPress}>\n            <View style={styles.container}>\n                <Text selectable={false} style={styles.text}>{text}</Text>\n            </View>\n        </Pressable>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        display: 'flex',\n        backgroundColor: '#d9d9d9',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginVertical: 10,\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    }\n});","import React, { useState } from \"react\";\nimport { Pressable, StyleSheet, Text, View, Modal } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons'; \nimport Markdown from 'react-native-markdown-display';\nimport { useRecoilState } from \"recoil\";\nimport { pairingState, selectedState } from \"../lib/state\";\nimport { FontAwesome } from '@expo/vector-icons';\n\nexport const Tool = ({ id, name, description, size }: { id: number, name: string, description: string, size: number }) => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const [pairing, setPairing] = useRecoilState(pairingState);\n    const selectedText = useRecoilState(selectedState);\n    const selectedTextId = selectedText[0].indexOf(true);\n    \n    return (\n        <View style={styles.container} >\n            <View style={styles.tool}>\n                <Pressable onPress={() => {\n                    if (selectedText[0].includes(true)) {\n                        const idx = pairing.findIndex((pair) => pair.textId === selectedTextId);        \n                            let newPairing = structuredClone(pairing);\n                            newPairing[idx].deviceId = pairing[idx].deviceId === id ? -1 : id;\n                            setPairing(newPairing);\n                    }\n                }}>\n                    <View style={styles.buttonSelect}>{selectedText[0].includes(true) && pairing[pairing.findIndex((pair) => pair.textId === selectedTextId)].deviceId === id ? <FontAwesome name=\"square\" size={13} color=\"black\" /> : <></>}</View>\n                </Pressable>\n                <Text selectable={false} style={styles.device}>{name}</Text>\n            </View>\n            <View>\n                <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                    onRequestClose={() => {\n                        setModalVisible(!modalVisible);\n                    }}\n                >\n                    <View style={styles.centeredView}>\n                        <View style={styles.modalView}>\n                            <Markdown>{description}</Markdown>\n                            <Pressable\n                                style={styles.buttonClose}\n                                onPress={() => setModalVisible(!modalVisible)}\n                            >\n                                <Text style={styles.textStyle}>Close</Text>\n                            </Pressable>\n                        </View>\n                    </View>\n                </Modal>\n                <Pressable onPress={() => setModalVisible(true)}>\n                    <MaterialCommunityIcons name=\"chat-question-outline\" size={24} color=\"black\" />\n                </Pressable>\n            </View>\n            \n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({ \n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginHorizontal: 20,\n        height: 30,\n        width: 200,\n    },\n    device: {\n        \n    },\n    tool: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    buttonSelect: {\n        width: 15,\n        height: 15,\n        borderRadius: 2,\n        backgroundColor: '#d9d9d9',\n        marginRight: 10,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    centeredView: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 22\n      },\n    modalView: {\n        margin: 20,\n        backgroundColor: \"white\",\n        borderRadius: 20,\n        padding: 35,\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5\n    },\n    buttonClose: {\n        backgroundColor: \"#2196F3\",\n        padding: 10,\n        borderRadius: 20,\n    },\n    textStyle: {\n        color: \"white\",\n        fontWeight: \"bold\",\n        textAlign: \"center\"\n    },\n    modalText: {\n        marginBottom: 15,\n        textAlign: \"justify\"\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\nimport { Tool } from './Tool';\n\nexport const Toolbox = ({ tools }: { tools: Array<{\n    name: string;\n    description: string;\n  }>}) => {\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>Rethorical tools</Text>\n            {tools.map((tool, index) => (\n                <Tool key={index} id={index} name={tool.name} description={tool.description} size={tools.length} />\n            ))}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        display: 'flex',\n        backgroundColor: '#5bc8af',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        paddingBottom: 20,\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    }\n});","import { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { SidebarButton } from '../components/SidebarButton';\nimport { Toolbox } from '../components/Toolbox';\nimport { pairingState, resultsState } from '../lib/state';\n\nexport const ToolsSidebar = ({ tools, size, id, info, textSetter }: { tools: Array<Guide>, size: number, id: number, info: ChallengeText, textSetter: React.Dispatch<React.SetStateAction<number>>}) => {\n    const [results, setResults] = useRecoilState(resultsState);\n    const [pairing, setPairing] = useRecoilState(pairingState);\n    \n    return (\n        <View style={styles.container}>\n            <Toolbox tools={tools} />\n            <SidebarButton text=\"CHECK YOUR ANSWERS\" onPress={() => {\n                let results = 0;\n                for (let i = 0; i < pairing.length; i++) {\n                    if (pairing[i].deviceId === info.devices[i].name) results++;\n                }\n                setResults(Math.trunc((results / pairing.length) * 100));\n            }} />\n            <SidebarButton text=\"Next\" onPress={() => { textSetter((id+1) % size) }} />\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"20%\",\n        flexWrap: 'wrap',\n        display: 'flex',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginHorizontal: 20,\n    }\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { useEffect } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { Title } from '../components/Title';\nimport { ControlsSidebar } from '../layout/ControlsSidebar';\nimport { Paper } from '../layout/Paper';\nimport { ToolsSidebar } from '../layout/ToolsSidebar';\nimport { pairingState, resultsState, selectedState } from '../lib/state';\n\nexport const Main = ({ data, textState }: { data: Data | undefined, textState: [number, React.Dispatch<React.SetStateAction<number>>]}) => {\n  const [selected, setSelected] = useRecoilState(selectedState);\n  const [pairing, setPairing] = useRecoilState(pairingState);\n  const [results, setResults] = useRecoilState(resultsState);\n  const [text, setText] = textState;\n\n  useEffect(() => {\n    if (data !== undefined) {\n        setResults(-1);\n        setSelected(Array(data?.texts[text].devices.length).fill(false, 0, data?.texts[text].devices.length));\n        setPairing(Array.from(Array(data?.texts[text].devices.length), (_, index) => { return { textId: index, deviceId: -1 }}));\n    }\n  }, [text]);\n  \n  return (\n    <> \n        <Title title={data?.texts[text].name!} name={data?.texts[text].author!} />\n        <View style={styles.container}>\n        <ControlsSidebar res={data?.results!} />\n        <Paper text={data?.texts[text].text!} devices={data?.texts[text].devices!}/>\n        <ToolsSidebar tools={data?.guides!} id={text} size={data?.texts.length!} info={data?.texts[text]!} textSetter={setText}/>\n        </View>\n        <StatusBar style=\"auto\" />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    backgroundColor: '#fff',\n    alignItems: 'flex-start',\n    justifyContent: 'space-around',\n    marginVertical: 50,\n    marginTop: 45\n  },\n});\n","import { StyleSheet } from 'react-native';\nimport { BlurView } from 'expo-blur';\nimport { useEffect, useState } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport LoadingScreen from './src/components/LoadingScreen';\nimport { Intro } from './src/layout/Intro';\nimport { Main } from './src/layout/Main';\n\nexport default function App() {\n  const textState = useState(0);\n  const [wasIntroduced, setIntro] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState<Data | undefined>(undefined);\n\n  useEffect(() => {\n    fetch('https://raw.githubusercontent.com/lampask/grasp-eng/dev/texts.json')\n      .then((response) => response.json())\n      .then((json) => {\n        (json as Data).texts = (json as Data).texts.sort(() => Math.random() - 0.5);\n        setData(json)\n      })\n      .catch((error) => console.error(error))\n      .finally(() => setLoading(false));\n  }, []);\n  \n  return (\n    <RecoilRoot>\n      {isLoading ? <LoadingScreen /> : (\n        <>\n          <Main data={data} textState={textState} />\n          {wasIntroduced ? <></> : <Intro data={data?.intro!} introduced={setIntro} />}\n        </>\n      )}\n    </RecoilRoot>\n  );\n}"],"sourceRoot":""}