{"version":3,"sources":["src/components/LoadingScreen.tsx","src/layout/Intro.tsx","src/components/Title.tsx","src/components/Check.tsx","src/lib/state.ts","src/layout/ControlsSidebar.tsx","src/components/Highlight.tsx","src/layout/Paper.tsx","src/components/SidebarButton.tsx","src/components/Tool.tsx","src/components/Toolbox.tsx","src/layout/ToolsSidebar.tsx","src/layout/Main.tsx","App.tsx"],"names":["LoadingScreen","View","style","styles","body","ActivityIndicator","size","StatusBar","StyleSheet","create","display","height","flexDirection","alignItems","justifyContent","backgroundColor","paddingHorizontal","Intro","data","introduced","container","box","Text","selectable","text","title","undefined","content","Pressable","onPress","buttonText","position","left","bottom","right","fontWeight","padding","fontSize","width","top","border","borderRadius","marginVertical","Title","name","marginTop","color","textAlignc","fontStyle","Check","results","res","resText","forEach","result","breakpoint","message","sphere","marginBottom","marginRight","textAlign","transform","translateX","selectedState","atom","key","default","resultsState","pairingState","settingState","ControlsSidebar","useRecoilState","isTabletOrMobileDevice","useMediaQuery","maxDeviceWidth","column","row","marginHorizontal","Highlight","id","count","device","paraghraph","useState","isHovered","selected","setSelected","substring","range","newSelected","Array","fill","deviceSelected","deviceHovered","length","alignSelf","deviceSelectedAssigned","borderWidth","borderColor","Paper","devices","ScrollView","nestedScrollEnabled","paper","split","map","index","flag","elem","flex","flexWrap","fontFamily","paddingVertical","SidebarButton","Tool","description","modalVisible","setModalVisible","pairing","setPairing","selectedText","selectedTextId","indexOf","tool","includes","idx","findIndex","pair","textId","newPairing","structuredClone","deviceId","buttonSelect","FontAwesome","Modal","animationType","transparent","visible","onRequestClose","centeredView","modalView","buttonClose","textStyle","MaterialCommunityIcons","margin","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","modalText","Toolbox","tools","settings","rhetoricHeadline","paddingBottom","ToolsSidebar","info","textSetter","setResults","checkAnswersButton","i","Math","trunc","nextButton","Main","textState","setSettings","setText","setDevices","useEffect","texts","guides","sort","random","from","_","author","App","wasIntroduced","setIntro","isLoading","setLoading","setData","fetch","then","response","json","catch","error","console","finally","intro"],"mappings":"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","file":"static/js/app.bae12ad0.chunk.js","sourcesContent":["import { StyleSheet, View, ActivityIndicator } from \"react-native\";\nimport { StatusBar } from \"expo-status-bar\";\n\nexport default function LoadingScreen() {\n  return (\n    <View style={styles.body}>\n      <ActivityIndicator size='large' />\n      <StatusBar style='auto' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  body: {\n    display: \"flex\",\n    height: \"100%\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: \"#f2f2f6\",\n    paddingHorizontal: 15,\n  },\n});\n","import { BlurView } from 'expo-blur';\nimport { StyleSheet, View, Text, Pressable } from 'react-native';\nimport Markdown from 'react-native-markdown-display';\n\nexport const Intro = ({ data, introduced }: { data: Intro, introduced: React.Dispatch<React.SetStateAction<boolean>> }) => {\n    return (\n        <BlurView style={styles.container}>\n            <View style={styles.box}>\n                <Text selectable={false} style={styles.text}>{data.title}</Text>\n                <Markdown>\n                    {data !== undefined ? data.content : \"\"}\n                </Markdown>\n                <Pressable onPress={() => { introduced(true) }}>\n                    <Text>{data.buttonText}</Text>\n                </Pressable>\n            </View>\n        </BlurView>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        position: 'absolute',\n        left: 0,\n        bottom: 0,\n        right: 0,\n        height: '100%',\n    }, \n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    },\n    box: {\n        width: '50%',\n        position : 'absolute',\n        left: '25vw',\n        top: '50vh',\n        display: 'flex',\n        backgroundColor: '#fff',\n        border: '1px solid #000',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginVertical: 10,\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\n\nexport const Title = ({ title, name }: { title: string, name: string }) => {\n    return (\n        <View style={styles.box} >\n            <Text style={styles.title}>{title}</Text>\n            <Text style={styles.name}>by {name}</Text>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({ \n    title: {\n        marginTop: 75,\n        fontSize: 34,\n        fontWeight: 'bold',\n        color: 'black',\n        textAlignc: 'center',\n    },\n    box: {\n        width: '50hw',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    name: {\n        fontSize: 20,\n        fontStyle: 'italic',\n        color: 'gray',\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\n\nexport const Check = ({ results, res }: { results: number, res: Result[] }) => {\n    \n    let resText = \"\";\n    res.forEach((result) => {\n        if (result.breakpoint <= results ) {\n            resText = result.message;\n        }\n    })\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>{resText}</Text>\n            <View style={styles.sphere}>\n                <Text style={styles.result}>{results}%</Text>\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        height: 75,\n        display: 'flex',\n        backgroundColor: '#5bc8af',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginBottom: 30\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 14,\n        marginRight: 90,\n        textAlign: 'center',\n    },\n    sphere: {\n        position: 'absolute',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: '#00a368', \n        width: 105,\n        height: 105,\n        borderRadius: 105,\n        backgroundColor: '#00a368',\n        transform: [{translateX: 100}],\n    },\n    result: {\n        fontSize: 40,\n        fontWeight: 'bold',\n    }\n});","import { atom } from \"recoil\";\n\nexport const selectedState = atom({\n    key: \"selected\",\n    default: [] as boolean[],\n});\n\nexport const resultsState = atom({\n    key: \"results\",\n    default: -1 as number,\n});\n\nexport const pairingState = atom({\n    key: \"pairing\",\n    default: [] as Array<{\n        textId: number;\n        deviceId: number;\n    }>,\n});\n\nexport const settingState = atom({\n    key: \"settings\",\n    default: {} as Settings\n});","import { StyleSheet, View } from 'react-native';\nimport { useMediaQuery } from 'react-responsive';\nimport { useRecoilState } from 'recoil';\nimport { Check } from '../components/Check';\nimport { resultsState } from '../lib/state';\n\nexport const ControlsSidebar = ({res}: { res: Result[] }) => {\n    const [results, setResults] = useRecoilState(resultsState);\n    const isTabletOrMobileDevice = useMediaQuery({    \n        maxDeviceWidth: 1224,\n      });\n    return (\n        <View style={[styles.container, isTabletOrMobileDevice ? styles.column : styles.row]}>\n            {results !== -1 ? <Check results={results} res={res} /> : <></>}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginHorizontal: 20,\n    },\n    row: {\n        width: '20%',\n    },\n    column: {\n        width: '90%',\n    }\n});","import { useState } from 'react';\nimport { Pressable, StyleSheet, Text, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { selectedState } from '../lib/state';\n\nexport const Highlight = ({ id, count, device, paraghraph, size }: { id: number, count: number, device: {name: number;range: Array<number>}, paraghraph: string, size: number}) => {\n    const [isHovered, setIsHovered] = useState(false);\n    const [selected, setSelected] = useRecoilState(selectedState);\n    \n    return (\n        <Text>{paraghraph.substring(0, device.range[0]-count)}<Text onPress={()=>{\n            let newSelected = Array(size).fill(false, 0, size);\n            newSelected[id] = !selected[id];\n            setSelected(newSelected);\n        }} >\n            <Text style={selected[id] ? styles.deviceSelected : (isHovered ? styles.deviceHovered : styles.device)}>{paraghraph.substring(device.range[0]-count, device.range[1]-count)}</Text>\n        </Text>{paraghraph.substring(device.range[1]-count, count+paraghraph.length)}</Text>\n    );\n};\n\nconst styles = StyleSheet.create({\n    device: {\n        color: '#5bc8af',\n    },\n    deviceHovered: {\n        color: '#5bc8af',\n        backgroundColor: '#d9d9d9aa',\n        alignSelf: 'flex-start',\n    },\n    deviceSelected: {\n        color: '#5bc8af',\n        backgroundColor: '#d9d9d9dd',\n        alignSelf: 'flex-start',\n    },\n    deviceSelectedAssigned: {\n        borderWidth: 1,\n        borderColor: 'black',\n        borderRadius: 12, \n        padding: 1, \n        color: '#577FFF',\n    }\n});","import { ScrollView, StyleSheet, Text, View } from 'react-native';\nimport { useMediaQuery } from 'react-responsive';\nimport { Highlight } from '../components/Highlight';\n\nexport const Paper = ({text, devices} : {text: string, devices: Array<Device>}) => {\n  var count = 0;\n  const isTabletOrMobileDevice = useMediaQuery({    \n    maxDeviceWidth: 1224,\n  });\n  return (\n    <View style={[styles.container, isTabletOrMobileDevice ? styles.column : styles.row]}>\n      <ScrollView nestedScrollEnabled>\n        <View style={styles.paper}>\n        {text.split('\\n').map((paraghraph, index) => {\n          const size = paraghraph.length;\n          let flag = false;\n          const elem = (\n            <Text style={styles.text} key={index}>\n              {devices.map((device, index) => {\n                if (size+count > device.range[0] && count <= device.range[0] && size+count >= device.range[1] && count < device.range[1]) {\n                  flag = true;\n                  return <Highlight key={index} id={index} count={count} device={device} paraghraph={paraghraph} size={devices.length} />;\n                }\n              })}\n              {flag ? '' : paraghraph}\n            </Text>\n          )\n          count += size;\n          return elem;\n        })}\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n      border: '1px solid black',\n    },\n    paper: {\n      flex: 1,\n      marginVertical: 45,\n      marginHorizontal: 75,\n      display: 'flex',\n      flexDirection:'column',\n      flexWrap: 'wrap',\n    },\n    text: {\n      textAlign: 'left',\n      fontSize: 22,\n      fontFamily: \"Times New Roman\",\n      paddingVertical: 10,\n    },\n    row: {\n      width: '50%',\n    },\n    column: {\n      width: '90%',\n      marginBottom: 50,\n    }\n});","import { GestureResponderEvent, Pressable, StyleSheet, Text, View } from 'react-native';\n\nexport const SidebarButton = ({ text, onPress }: { text: string, onPress?: ((event: GestureResponderEvent) => void) | null | undefined } ) => {\n    return (\n        <Pressable onPress={onPress}>\n            <View style={styles.container}>\n                <Text selectable={false} style={styles.text}>{text}</Text>\n            </View>\n        </Pressable>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        width: 275,\n        display: 'flex',\n        backgroundColor: '#d9d9d9',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginVertical: 10,\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    }\n});","import React, { useState } from \"react\";\nimport { Pressable, StyleSheet, Text, View, Modal } from 'react-native';\nimport { MaterialCommunityIcons } from '@expo/vector-icons'; \nimport Markdown from 'react-native-markdown-display';\nimport { useRecoilState } from \"recoil\";\nimport { pairingState, selectedState } from \"../lib/state\";\nimport { FontAwesome } from '@expo/vector-icons';\n\nexport const Tool = ({ id, name, description, size }: { id: number, name: string, description: string, size: number }) => {\n    const [modalVisible, setModalVisible] = useState(false);\n    const [pairing, setPairing] = useRecoilState(pairingState);\n    const selectedText = useRecoilState(selectedState);\n    const selectedTextId = selectedText[0].indexOf(true);\n    \n    return (\n        <View style={styles.container} >\n            <View style={styles.tool}>\n                <Pressable onPress={() => {\n                    if (selectedText[0].includes(true)) {\n                        const idx = pairing.findIndex((pair) => pair.textId === selectedTextId);        \n                            let newPairing = structuredClone(pairing);\n                            newPairing[idx].deviceId = pairing[idx].deviceId === id ? -1 : id;\n                            setPairing(newPairing);\n                    }\n                }}>\n                    <View style={styles.buttonSelect}>{selectedText[0].includes(true) && pairing[pairing.findIndex((pair) => pair.textId === selectedTextId)].deviceId === id ? <FontAwesome name=\"square\" size={13} color=\"black\" /> : <></>}</View>\n                </Pressable>\n                <Text selectable={false} style={styles.device}>{name}</Text>\n            </View>\n            <View>\n                <Modal\n                    animationType=\"slide\"\n                    transparent={true}\n                    visible={modalVisible}\n                    onRequestClose={() => {\n                        setModalVisible(!modalVisible);\n                    }}\n                >\n                    <View style={styles.centeredView}>\n                        <View style={styles.modalView}>\n                            <Markdown>{description}</Markdown>\n                            <Pressable\n                                style={styles.buttonClose}\n                                onPress={() => setModalVisible(!modalVisible)}\n                            >\n                                <Text style={styles.textStyle}>Close</Text>\n                            </Pressable>\n                        </View>\n                    </View>\n                </Modal>\n                <Pressable onPress={() => setModalVisible(true)}>\n                    <MaterialCommunityIcons name=\"chat-question-outline\" size={24} color=\"black\" />\n                </Pressable>\n            </View>\n            \n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({ \n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        marginHorizontal: 20,\n        height: 30,\n        width: 200,\n    },\n    device: {\n        \n    },\n    tool: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    buttonSelect: {\n        width: 15,\n        height: 15,\n        borderRadius: 2,\n        backgroundColor: '#d9d9d9',\n        marginRight: 10,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    centeredView: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        marginTop: 22\n      },\n    modalView: {\n        margin: 20,\n        backgroundColor: \"white\",\n        borderRadius: 20,\n        padding: 35,\n        alignItems: \"center\",\n        shadowColor: \"#000\",\n        shadowOffset: {\n            width: 0,\n            height: 2\n        },\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n        elevation: 5\n    },\n    buttonClose: {\n        backgroundColor: \"#2196F3\",\n        padding: 10,\n        borderRadius: 20,\n    },\n    textStyle: {\n        color: \"white\",\n        fontWeight: \"bold\",\n        textAlign: \"center\"\n    },\n    modalText: {\n        marginBottom: 15,\n        textAlign: \"justify\"\n    }\n});","import { StyleSheet, Text, View } from 'react-native';\nimport { useMediaQuery } from 'react-responsive';\nimport { useRecoilState } from 'recoil';\nimport { settingState } from '../lib/state';\nimport { Tool } from './Tool';\n\nexport const Toolbox = ({ tools }: { tools: Array<{\n    name: string;\n    description: string;\n  }>}) => {\n    const isTabletOrMobileDevice = useMediaQuery({    \n        maxDeviceWidth: 1224,\n      })\n    const [settings, setSettings] = useRecoilState(settingState);\n    return (\n        <View style={[styles.container, isTabletOrMobileDevice ? styles.column : styles.row]}>\n            <Text style={styles.text}>{settings.rhetoricHeadline}</Text>\n            {tools.map((tool, index) => (\n                <Tool key={index} id={index} name={tool.name} description={tool.description} size={tools.length} />\n            ))}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        display: 'flex',\n        backgroundColor: '#5bc8af',\n        borderRadius: 33,\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        paddingBottom: 20,\n    },\n    text: {\n        fontWeight: 'bold',\n        padding: 10,\n        fontSize: 17,\n    },\n    row: {\n        width: 275,\n    },\n    column: {\n        width: \"90%\",\n    }\n});","import { StyleSheet, View } from 'react-native';\nimport { useMediaQuery } from 'react-responsive';\nimport { useRecoilState } from 'recoil';\nimport { SidebarButton } from '../components/SidebarButton';\nimport { Toolbox } from '../components/Toolbox';\nimport { pairingState, resultsState, settingState } from '../lib/state';\n\nexport const ToolsSidebar = ({ tools, size, id, info, textSetter }: { tools: Array<Guide>, size: number, id: number, info: ChallengeText, textSetter: React.Dispatch<React.SetStateAction<number>>}) => {\n    const [results, setResults] = useRecoilState(resultsState);\n    const [pairing, setPairing] = useRecoilState(pairingState);\n    const [settings, setSettings] = useRecoilState(settingState);\n    const isTabletOrMobileDevice = useMediaQuery({    \n        maxDeviceWidth: 1224,\n      });\n    \n    return (\n        <View style={[styles.container, isTabletOrMobileDevice ? styles.column : styles.row]}>\n            <Toolbox tools={tools} />\n            {results === -1 ? <SidebarButton text={settings.checkAnswersButton} onPress={() => {\n                let results = 0;\n                for (let i = 0; i < pairing.length; i++) {\n                    if (pairing[i].deviceId === info.devices[i].name) results++;\n                }\n                setResults(Math.trunc((results / pairing.length) * 100));\n            }} /> : <></> }\n            <SidebarButton text={settings.nextButton} onPress={() => { textSetter((id+1) % size) }} />\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        flexWrap: 'wrap',\n        display: 'flex',\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        marginHorizontal: 20,\n    },\n    row: {\n      width: '20%',\n    },\n    column: {\n      width: '90%',\n    }\n});\n","import { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useRecoilState } from 'recoil';\nimport { Title } from '../components/Title';\nimport { ControlsSidebar } from '../layout/ControlsSidebar';\nimport { Paper } from '../layout/Paper';\nimport { ToolsSidebar } from '../layout/ToolsSidebar';\nimport { pairingState, resultsState, selectedState, settingState } from '../lib/state';\nimport '@expo/match-media'\nimport { useMediaQuery } from \"react-responsive\";\n\nexport const Main = ({ data, textState }: { data: Data | undefined, textState: [number, React.Dispatch<React.SetStateAction<number>>]}) => {\n  const [selected, setSelected] = useRecoilState(selectedState);\n  const [pairing, setPairing] = useRecoilState(pairingState);\n  const [results, setResults] = useRecoilState(resultsState);\n  const [settings, setSettings] = useRecoilState(settingState);\n  const [text, setText] = textState;\n  const [devices, setDevices] = useState([] as Guide[]);\n\n  \n  useEffect(() => {\n    setSettings(data?.settings!);\n  }, []);\n\n  useEffect(() => {\n    if (data !== undefined) {\n        setResults(-1);\n        setDevices([...data?.texts[text].devices.map((device) => data?.guides[device.name])!].sort(() => Math.random() - 0.5));\n        setSelected(Array(6).fill(false, 0, data?.texts[text].devices.length));\n        setPairing(Array.from(Array(6), (_, index) => { return { textId: index, deviceId: -1 }}));\n    }\n  }, [text]);\n  \n  const isTabletOrMobileDevice = useMediaQuery({    \n    maxDeviceWidth: 1224,\n  });\n\n  return (\n    <> \n        <Title title={data?.texts[text].name!} name={data?.texts[text].author!} />\n        <View style={[styles.container, isTabletOrMobileDevice ? styles.column : styles.row]}>\n            <ControlsSidebar res={data?.results!} />\n            <Paper text={data?.texts[text].text!} devices={data?.texts[text].devices!}/>\n            <ToolsSidebar tools={devices} id={text} size={data?.texts.length!} info={data?.texts[text]!} textSetter={setText}/>\n        </View>\n        <StatusBar style=\"auto\" />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: '100%',\n    display: 'flex',\n    backgroundColor: '#fff',\n    justifyContent: 'space-around',\n    marginVertical: 50,\n    marginTop: 45\n  },\n  row: {\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n  },\n  column: {\n    alignItems: 'center',\n    flexDirection: 'column-reverse'\n  },\n});\n","import { StyleSheet } from 'react-native';\nimport { BlurView } from 'expo-blur';\nimport { useEffect, useState } from 'react';\nimport { RecoilRoot } from 'recoil';\nimport LoadingScreen from './src/components/LoadingScreen';\nimport { Intro } from './src/layout/Intro';\nimport { Main } from './src/layout/Main';\n\nexport default function App() {\n  const textState = useState(0);\n  const [wasIntroduced, setIntro] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [data, setData] = useState<Data | undefined>(undefined);\n\n  useEffect(() => {\n    fetch('https://raw.githubusercontent.com/lampask/grasp-eng/dev/texts.json')\n      .then((response) => response.json())\n      .then((json) => {\n        (json as Data).texts = (json as Data).texts.sort(() => Math.random() - 0.5);\n        setData(json)\n      })\n      .catch((error) => console.error(error))\n      .finally(() => setLoading(false));\n  }, []);\n  \n  return (\n    <RecoilRoot>\n      {isLoading ? <LoadingScreen /> : (\n        <>\n          <Main data={data} textState={textState} />\n          {wasIntroduced ? <></> : <Intro data={data?.intro!} introduced={setIntro} />}\n        </>\n      )}\n    </RecoilRoot>\n  );\n}"],"sourceRoot":""}